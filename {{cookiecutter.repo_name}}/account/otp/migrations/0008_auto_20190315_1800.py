# Generated by Django 2.1.5 on 2019-03-15 11:00

from django.contrib.postgres.fields.jsonb import KeyTransform
from django.db import migrations
from django.apps.registry import apps as django_app_util
import logging

logger = logging.getLogger(__name__)


def update_otp_attempt_time(apps, schema_editor):
    '''
    We can't import the Post model directly as it may be a newer
    version than this migration expects. We use the historical version.
    '''
    WebEvent = apps.get_model('analytics', 'WebEvent')
    OTPAttempt = apps.get_model('otp', 'OTPAttempt')
    OTP_URLS = ["insurance:travel:otp_view", "insurance:car:otp_view"]
    otp_webevents = WebEvent.objects.using('analytics').filter(url_name__in=OTP_URLS, method="POST")
    otp_webevents = otp_webevents.annotate(otp=KeyTransform('otp', 'data')).filter(otp__isnull=False).values('created', 'otp', 'visitor__session_key')
    for webevent in otp_webevents.iterator():
        # Simple method. Check if the generated OTP was unique. If yes, use that.
        try:
            otp_attempt = OTPAttempt.objects.filter(
                otp__in=webevent['otp'],
                author_id=webevent['visitor__session_key']).latest('id')
        except (OTPAttempt.DoesNotExist, KeyError) as e:
            # Key error in case the Webevent didn't have the data
            logger.error(e)
        else:
            otp_attempt.created = webevent['created']
            otp_attempt.save(update_fields=['created'])


def copy_existing_otp_instances(apps, schema_editor):
    # migrating_for_db = schema_editor.connection.alias
    # # Check if being migrated for pii DB. Only then will the OTPAttempt_pii and OTPModel_pii will be available
    # # Or connect Db flag is set to True
    # # TODO: connect Db flag is set to True
    # if migrating_for_db == "pii":
    OTPModel_pii = django_app_util.get_model('otp', 'OTPModel_pii')
    OTPAttempt_pii = django_app_util.get_model('otp', 'OTPAttempt_pii')
    OTPModel_default = django_app_util.get_model('otp', 'OTPModel')
    OTPAttempt_default = django_app_util.get_model('otp', 'OTPAttempt')
    for otp_model_instance in OTPModel_default.objects.using('default').all().iterator():
        instance = OTPModel_pii.objects.using('pii').create(
            phone_number=otp_model_instance.phone_number,
            generated_otp=otp_model_instance.generated_otp,
            otp_verified=otp_model_instance.otp_verified,
            author_type_id=otp_model_instance.author_type_id,
            author_id=otp_model_instance.author_id,
        )
        instance.created = otp_model_instance.created
        instance.modified = otp_model_instance.modified
        instance.save(update_fields=['created', 'modified'])
    for otp_attempt_instance in OTPAttempt_default.objects.using('default').all().iterator():
        instance = OTPAttempt_pii.objects.using('pii').create(
            phone_number=otp_attempt_instance.phone_number,
            author_type_id=otp_attempt_instance.author_type_id,
            author_id=otp_attempt_instance.author_id,
            otp=otp_attempt_instance.otp,
        )
        instance.created = otp_attempt_instance.created
        instance.modified = otp_attempt_instance.modified
        instance.save(update_fields=['created', 'modified'])


class Migration(migrations.Migration):

    dependencies = [
        ('otp', '0007_auto_20190315_1748'),
    ]

    operations = [
        migrations.RunPython(update_otp_attempt_time, reverse_code=migrations.RunPython.noop, hints={'target_db': 'default'}),
        migrations.RunPython(copy_existing_otp_instances, reverse_code=migrations.RunPython.noop, hints={'target_db': 'pii'}),
    ]
